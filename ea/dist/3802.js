"use strict";(self.webpackChunkvolumetric_atmospheric_scattering=self.webpackChunkvolumetric_atmospheric_scattering||[]).push([[3802],{3802:(e,r,n)=>{n.r(r),n.d(r,{kernelBlurVertexShader:()=>s});var t=n(9610);n(7382);const a="kernelBlurVertex";t.l.IncludesShadersStore[a]||(t.l.IncludesShadersStore[a]="sampleCoord{X}=sampleCenter+delta*KERNEL_OFFSET{X};");const l="kernelBlurVertexShader",o="attribute vec2 position;uniform vec2 delta;varying vec2 sampleCenter;\n#include<kernelBlurVaryingDeclaration>[0..varyingCount]\nconst vec2 madd=vec2(0.5,0.5);\n#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\n#define CUSTOM_VERTEX_MAIN_BEGIN\nsampleCenter=(position*madd+madd);\n#include<kernelBlurVertex>[0..varyingCount]\ngl_Position=vec4(position,0.0,1.0);\n#define CUSTOM_VERTEX_MAIN_END\n}";t.l.ShadersStore[l]||(t.l.ShadersStore[l]=o);const s={name:l,shader:o}},7382:(e,r,n)=>{var t=n(9610);const a="kernelBlurVaryingDeclaration";t.l.IncludesShadersStore[a]||(t.l.IncludesShadersStore[a]="varying vec2 sampleCoord{X};")}}]);