"use strict";(self.webpackChunkvolumetric_atmospheric_scattering=self.webpackChunkvolumetric_atmospheric_scattering||[]).push([[5417],{2383:(e,r,n)=>{var t=n(9610);const a="kernelBlurVaryingDeclaration";t.l.IncludesShadersStoreWGSL[a]||(t.l.IncludesShadersStoreWGSL[a]="varying sampleCoord{X}: vec2f;")},5417:(e,r,n)=>{n.r(r),n.d(r,{kernelBlurVertexShaderWGSL:()=>u});var t=n(9610);n(2383);const a="kernelBlurVertex";t.l.IncludesShadersStoreWGSL[a]||(t.l.IncludesShadersStoreWGSL[a]="vertexOutputs.sampleCoord{X}=vertexOutputs.sampleCenter+uniforms.delta*KERNEL_OFFSET{X};");const s="kernelBlurVertexShader",l="attribute position: vec2f;uniform delta: vec2f;varying sampleCenter: vec2f;\n#include<kernelBlurVaryingDeclaration>[0..varyingCount]\n#define CUSTOM_VERTEX_DEFINITIONS\n@vertex\nfn main(input : VertexInputs)->FragmentInputs {const madd: vec2f= vec2f(0.5,0.5);\n#define CUSTOM_VERTEX_MAIN_BEGIN\nvertexOutputs.sampleCenter=(input.position*madd+madd);\n#include<kernelBlurVertex>[0..varyingCount]\nvertexOutputs.position= vec4f(input.position,0.0,1.0);\n#define CUSTOM_VERTEX_MAIN_END\n}";t.l.ShadersStoreWGSL[s]||(t.l.ShadersStoreWGSL[s]=l);const u={name:s,shader:l}}}]);